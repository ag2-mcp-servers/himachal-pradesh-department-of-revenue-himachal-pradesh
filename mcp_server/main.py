# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:02:29+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

from models import (
    AgcerCertificatePostRequest,
    AgcerCertificatePostResponse,
    AgcerCertificatePostResponse1,
    AgcerCertificatePostResponse2,
    AgcerCertificatePostResponse3,
    AgcerCertificatePostResponse4,
    AgcerCertificatePostResponse5,
    AgcerCertificatePostResponse6,
    BacerCertificatePostRequest,
    BacerCertificatePostResponse,
    BacerCertificatePostResponse1,
    BacerCertificatePostResponse2,
    BacerCertificatePostResponse3,
    BacerCertificatePostResponse4,
    BacerCertificatePostResponse5,
    BacerCertificatePostResponse6,
    BhcerCertificatePostRequest,
    BhcerCertificatePostResponse,
    BhcerCertificatePostResponse1,
    BhcerCertificatePostResponse2,
    BhcerCertificatePostResponse3,
    BhcerCertificatePostResponse4,
    BhcerCertificatePostResponse5,
    BhcerCertificatePostResponse6,
    ChcerCertificatePostRequest,
    ChcerCertificatePostResponse,
    ChcerCertificatePostResponse1,
    ChcerCertificatePostResponse2,
    ChcerCertificatePostResponse3,
    ChcerCertificatePostResponse4,
    ChcerCertificatePostResponse5,
    ChcerCertificatePostResponse6,
    DccerCertificatePostRequest,
    DccerCertificatePostResponse,
    DccerCertificatePostResponse1,
    DccerCertificatePostResponse2,
    DccerCertificatePostResponse3,
    DccerCertificatePostResponse4,
    DccerCertificatePostResponse5,
    DccerCertificatePostResponse6,
    FfcerCertificatePostRequest,
    FfcerCertificatePostResponse,
    FfcerCertificatePostResponse1,
    FfcerCertificatePostResponse2,
    FfcerCertificatePostResponse3,
    FfcerCertificatePostResponse4,
    FfcerCertificatePostResponse5,
    FfcerCertificatePostResponse6,
    IncerCertificatePostRequest,
    IncerCertificatePostResponse,
    IncerCertificatePostResponse1,
    IncerCertificatePostResponse2,
    IncerCertificatePostResponse3,
    IncerCertificatePostResponse4,
    IncerCertificatePostResponse5,
    IncerCertificatePostResponse6,
    LhcerCertificatePostRequest,
    LhcerCertificatePostResponse,
    LhcerCertificatePostResponse1,
    LhcerCertificatePostResponse2,
    LhcerCertificatePostResponse3,
    LhcerCertificatePostResponse4,
    LhcerCertificatePostResponse5,
    LhcerCertificatePostResponse6,
    MncerCertificatePostRequest,
    MncerCertificatePostResponse,
    MncerCertificatePostResponse1,
    MncerCertificatePostResponse2,
    MncerCertificatePostResponse3,
    MncerCertificatePostResponse4,
    MncerCertificatePostResponse5,
    MncerCertificatePostResponse6,
    ObcerCertificatePostRequest,
    ObcerCertificatePostResponse,
    ObcerCertificatePostResponse1,
    ObcerCertificatePostResponse2,
    ObcerCertificatePostResponse3,
    ObcerCertificatePostResponse4,
    ObcerCertificatePostResponse5,
    ObcerCertificatePostResponse6,
    PsprtCertificatePostRequest,
    PsprtCertificatePostResponse,
    PsprtCertificatePostResponse1,
    PsprtCertificatePostResponse2,
    PsprtCertificatePostResponse3,
    PsprtCertificatePostResponse4,
    PsprtCertificatePostResponse5,
    PsprtCertificatePostResponse6,
    RacerCertificatePostRequest,
    RacerCertificatePostResponse,
    RacerCertificatePostResponse1,
    RacerCertificatePostResponse2,
    RacerCertificatePostResponse3,
    RacerCertificatePostResponse4,
    RacerCertificatePostResponse5,
    RacerCertificatePostResponse6,
    RmcerCertificatePostRequest,
    RmcerCertificatePostResponse,
    RmcerCertificatePostResponse1,
    RmcerCertificatePostResponse2,
    RmcerCertificatePostResponse3,
    RmcerCertificatePostResponse4,
    RmcerCertificatePostResponse5,
    RmcerCertificatePostResponse6,
    ShcerCertificatePostRequest,
    ShcerCertificatePostResponse,
    ShcerCertificatePostResponse1,
    ShcerCertificatePostResponse2,
    ShcerCertificatePostResponse3,
    ShcerCertificatePostResponse4,
    ShcerCertificatePostResponse5,
    ShcerCertificatePostResponse6,
)

app = MCPProxy(
    description="Lok Praman Patra (http://admis.hp.nic.in/epraman/) is the online service delivery portal by Himachal Pradesh Govt. Certain documents issued by it (e.g.  Bonafide, Dogra Class, Income, Character Certificates etc.) can be pulled into citizens' DigiLocker accounts.",
    termsOfService='https://apisetu.gov.in/terms.php',
    title='Himachal Pradesh Department of Revenue, Himachal Pradesh',
    version='3.0.0',
    servers=[{'url': 'https://apisetu.gov.in/epramanhp/v3'}],
)


@app.post(
    '/agcer/certificate',
    description=""" API to verify Agriculture/ Agriculturist Certificate. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def agcer(body: AgcerCertificatePostRequest = None):
    """
    Agriculture/ Agriculturist Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/bacer/certificate',
    description=""" API to verify Backward Area Certificate. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def bacer(body: BacerCertificatePostRequest = None):
    """
    Backward Area Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/bhcer/certificate',
    description=""" API to verify Bonafide Certificate. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def bhcer(body: BhcerCertificatePostRequest = None):
    """
    Bonafide Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/chcer/certificate',
    description=""" API to verify Character Certificate. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def chcer(body: ChcerCertificatePostRequest = None):
    """
    Character Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/dccer/certificate',
    description=""" API to verify Dogra Class Certificate. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def dccer(body: DccerCertificatePostRequest = None):
    """
    Dogra Class Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ffcer/certificate',
    description=""" API to verify Freedom Fighter Certificate. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def ffcer(body: FfcerCertificatePostRequest = None):
    """
    Freedom Fighter Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/incer/certificate',
    description=""" API to verify Income Certificate. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def incer(body: IncerCertificatePostRequest = None):
    """
    Income Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/lhcer/certificate',
    description=""" API to verify Legal Heir Certificate. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def lhcer(body: LhcerCertificatePostRequest = None):
    """
    Legal Heir Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mncer/certificate',
    description=""" API to verify Minority Certificate. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def mncer(body: MncerCertificatePostRequest = None):
    """
    Minority Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/obcer/certificate',
    description=""" API to verify OBC Certificate. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def obcer(body: ObcerCertificatePostRequest = None):
    """
    OBC Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/psprt/certificate',
    description=""" API to verify Passport/ Passport Verification. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def psprt(body: PsprtCertificatePostRequest = None):
    """
    Passport/ Passport Verification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/racer/certificate',
    description=""" API to verify Rural Area Certificate. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def racer(body: RacerCertificatePostRequest = None):
    """
    Rural Area Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rmcer/certificate',
    description=""" API to verify Marriage Certificate. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def rmcer(body: RmcerCertificatePostRequest = None):
    """
    Marriage Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/shcer/certificate',
    description=""" API to verify SC/ST  Certificate. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def shcer(body: ShcerCertificatePostRequest = None):
    """
    SC/ST  Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
